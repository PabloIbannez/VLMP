#!/home/pablo/anaconda3/bin/python
import sys,os
import shutil

import json

import itertools

import logging

import psutil
import signal

import multiprocessing
import subprocess

import time
import datetime

################

gpuIDList = []

if os.uname()[1] == "pablo-HOME":
    gpuIDList = [0]
if os.uname()[1] == "compute-new":
    gpuIDList = [0,1,2,3,5]

#################

def signalHandler(sig,frame):
    logging.info("Signal {} detected. Exiting ...".format(sig))

    mainProcess = psutil.Process(os.getpid())
    for child in mainProcess.children(recursive=True):
        child.kill()

    sys.exit(0)

def associateCPUtoGPU(gpuIDList):
    cpuName = multiprocessing.current_process().name
    try:
        cpuID = int(cpuName[cpuName.find('-') + 1:]) - 1
    except:
        cpuID = 0
    gpuID = gpuIDList[cpuID % len(gpuIDList)]
    return gpuID

def runSimulation(simulationsInfo, setInfo, gpuIDList):

    name, folder, options, components = setInfo

    gpuId = associateCPUtoGPU(gpuIDList)
    cudaFlag = 'CUDA_VISIBLE_DEVICES={}'.format(gpuId)

    fout = open(folder+"/stdout.log","w")
    ferr = open(folder+"/stderr.log","w")

    sst = time.time()

    sim = " ".join([cudaFlag, " ".join(["UAMMDlauncher",options])])
    simReturn = subprocess.run(sim, stdout=fout, stderr=ferr, shell=True, cwd=folder)

    fout.close()
    ferr.close()

    if simReturn.returncode == 0:
        logging.info("Simulation {} finished. Total time: {}".format(folder,
                                                                     str(datetime.timedelta(seconds=(time.time() - sst)))))
        logging.info("Moving simulations to results ...")

        output2results = {sim:{"output":output,"results":results} for [sim,output,results] in simulationsInfo}

        for comp in components:
            output  = output2results[comp]["output"]+"/"
            results = output2results[comp]["results"]+"/"

            if not os.path.exists(results):
                logging.error(f"Results folder does no exist for \"{comp}\"")
                continue

            for fileName in os.listdir(output):
                sourceFile = os.path.join(output, fileName)
                destinationFile = os.path.join(results, fileName)
                if os.path.exists(destinationFile):
                    if os.path.getmtime(destinationFile) < os.path.getmtime(sourceFile):
                        shutil.move(sourceFile, destinationFile)
                else:
                    shutil.move(sourceFile, destinationFile)
    else:
        logging.info("Simulation {} finished with errors. Error code: {}. Total time: {}".format(folder,
                                                                                                 simReturn.returncode,
                                                                                                 str(datetime.timedelta(seconds=(time.time() - sst)))))
    return simReturn

def runSimulationSets(logging, simulationsInfo, simulationSets, gpuIDList):

    with multiprocessing.Pool(processes=len(gpuIDList)) as pool:
        simSetGPU = tuple(zip(itertools.repeat(simulationsInfo.copy()),simulationSets,itertools.repeat(gpuIDList)))
        out = list(pool.starmap(runSimulation,simSetGPU))

    return out

def main(simulationSetsInfo):

    with open(simulationSetsInfo,"r") as f:
        simulationSetsInfo = json.load(f)

    simulationName  = simulationSetsInfo["name"]
    simulationsInfo = simulationSetsInfo["simulations"]
    simulationSets  = simulationSetsInfo["simulationSets"]

    logging.basicConfig(filename=f'{simulationName}.log',
                        filemode='w',
                        level=0,
                        format='%(asctime)s %(levelname)s: %(message)s',
                        datefmt='%m/%d/%Y %H:%M:%S')

    logging.info("Start")
    logging.info("pid: {}".format(os.getpid()))

    signal.signal(signal.SIGINT,signalHandler)
    signal.signal(signal.SIGTERM,signalHandler)

    st = time.time()
    out = runSimulationSets(logging,simulationsInfo,simulationSets,gpuIDList)
    logging.info("Simulation sets finished. Total time: {}".format(str(datetime.timedelta(seconds=(time.time() - st)))))

    for i in out:
        if(i.returncode!=0):
            logging.error("Something went wrong for simulation: {}".format(i))

    logging.info("End")

if __name__ == "__main__":

    if len(sys.argv) < 2:
        print("Usage: VLMPlauncher <simulationSetsInfo>")
        sys.exit(1)

    simulationSetsInfo = sys.argv[1]

    child_pid = os.fork()

    if child_pid == 0:
        main(simulationSetsInfo)
    else:
        sys.exit(0)
